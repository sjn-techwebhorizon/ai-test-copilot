name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  NODE_VERSION: '18'

jobs:
  # Quick checks job
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check code formatting
      run: npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}"
      continue-on-error: true

    - name: Lint code
      run: npx eslint src/ --ext .js,.jsx,.ts,.tsx
      continue-on-error: true

    - name: Type check (if TypeScript)
      run: |
        if [ -f "tsconfig.json" ]; then
          npx tsc --noEmit
        else
          echo "No TypeScript configuration found, skipping type check"
        fi
      continue-on-error: true

  # Test job
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quick-checks
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test -- --coverage --watchAll=false
      env:
        CI: true

    - name: Upload coverage reports
      if: matrix.node-version == 18
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/

  # Build job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quick-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      run: npm run build

    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: build/
        retention-days: 30

    - name: Check bundle size
      run: |
        if [ -d "build/static/js" ]; then
          echo "📦 Bundle sizes:"
          ls -lah build/static/js/*.js | awk '{print $9 ": " $5}'
        fi

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: |
        echo "🔒 Running npm audit..."
        npm audit --audit-level moderate
        
        echo "🔍 Checking for known vulnerabilities..."
        npx audit-ci --moderate
      continue-on-error: true

    - name: Check for secrets in code
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Performance checks
  performance-check:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: build/

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Lighthouse CLI
      run: npm install -g @lhci/cli

    - name: Run Lighthouse CI
      run: |
        # Start a local server
        npx serve -s build -p 3000 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Run Lighthouse
        lhci autorun --upload.target=temporary-public-storage || echo "Lighthouse analysis completed"
        
        # Clean up
        kill $SERVER_PID || true
      continue-on-error: true

  # Final status check
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [quick-checks, test, build, security-audit]
    if: always()
    
    steps:
    - name: Check CI status
      run: |
        echo "## 🚀 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Quick Checks | ${{ needs.quick-checks.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.quick-checks.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
          echo "🎉 **All critical checks passed!**" >> $GITHUB_STEP_SUMMARY
          exit 0
        else
          echo "❌ **Some checks failed. Please review the logs.**" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

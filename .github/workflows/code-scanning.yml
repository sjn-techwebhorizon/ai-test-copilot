name: Code Scanning and Quality Checks

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Security scanning with CodeQL
  codeql-analysis:
    name: CodeQL Security Scan
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --file=package.json

  # Code quality and linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npx eslint src/ --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-results.json
      continue-on-error: true

    - name: Annotate ESLint results
      uses: ataylorme/eslint-annotate-action@v2
      if: always()
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        report-json: "eslint-results.json"

    - name: Upload ESLint results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: eslint-results
        path: eslint-results.json

  # Testing and coverage
  test-and-coverage:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests with coverage
      run: npm test -- --coverage --watchAll=false --testResultsProcessor=jest-sonar-reporter
      env:
        CI: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./coverage/
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          test-report.xml

  # SARIF upload for security findings
  sarif-upload:
    name: Upload SARIF Results
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint with SARIF output
      run: |
        npx eslint src/ \
          --ext .js,.jsx,.ts,.tsx \
          --format @microsoft/eslint-formatter-sarif \
          --output-file eslint.sarif
      continue-on-error: true

    - name: Upload ESLint SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: eslint.sarif
        category: eslint

  # Build verification
  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Check build size
      run: |
        BUILD_SIZE=$(du -sh build/ | cut -f1)
        echo "Build size: $BUILD_SIZE"
        echo "BUILD_SIZE=$BUILD_SIZE" >> $GITHUB_ENV

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: build/
        retention-days: 7

  # Security headers and best practices check
  security-headers:
    name: Security Headers Check
    runs-on: ubuntu-latest
    needs: [build-check]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: build/

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install security scanner
      run: npm install -g @lhci/cli lighthouse

    - name: Serve build and run security audit
      run: |
        npx serve -s build -p 3000 &
        sleep 10
        curl -I http://localhost:3000 || echo "Failed to connect"
        # Add your security headers check here
      continue-on-error: true

  # Summary job
  scan-summary:
    name: Scan Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan, code-quality, test-and-coverage, build-check]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create scan summary
      run: |
        echo "## 🔍 Code Scanning Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL Security | ${{ needs.codeql-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests & Coverage | ${{ needs.test-and-coverage.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Check | ${{ needs.build-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Scan completed at:** $(date)" >> $GITHUB_STEP_SUMMARY
